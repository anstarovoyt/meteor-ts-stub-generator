{
  "Session": {
    "kind":"namespace",
    "set": {
      "memberof": "Session",
      "kind": "function",
      "summary": "Set a variable in the session. Notify any listeners that the value has changed (eg: redraw templates, and rerun any [`Tracker.autorun`](#tracker_autorun) computations, that called [`Session.get`](#session_get) on this `key`.)",
      "params": [
        {"type": {"names": ["String"]}, "description": "<p>The key to set, eg, <code>selectedItem</code></p>", "name": "key"},
        {
          "type": {
            "names": [
              "EJSONable",
              "undefined"
            ]
          }, "description": "<p>The new value for <code>key</code></p>", "name": "value"
        }
      ],
      "longname": "Session.set",
      "options": [],
      "locus": "Client"
    },
    "setDefault": {
      "memberof": "Session",
      "kind": "function",
      "summary": "Set a variable in the session if it is undefined. Otherwise works exactly the same as [`Session.set`](#session_set).",
      "params": [
        {"type": {"names": ["String"]}, "description": "<p>The key to set, eg, <code>selectedItem</code></p>", "name": "key"},
        {
          "type": {
            "names": [
              "EJSONable",
              "undefined"
            ]
          }, "description": "<p>The new value for <code>key</code></p>", "name": "value"
        }
      ],
      "longname": "Session.setDefault",
      "options": [],
      "locus": "Client"
    },
    "get": {
      "memberof": "Session",
      "kind": "function",
      "summary": "Get the value of a session variable. If inside a [reactive computation](#reactivity), invalidate the computation the next time the value of the variable is changed by [`Session.set`](#session_set). This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.",
      "params": [{"type": {"names": ["String"]}, "description": "<p>The name of the session variable to return</p>", "name": "key"}],
      "longname": "Session.get",
      "options": [],
      "locus": "Client"
    },
    "equals": {
      "memberof": "Session",
      "kind": "function",
      "summary": "Test if a session variable is equal to a value. If inside a [reactive computation](#reactivity), invalidate the computation the next time the variable changes to or from the value.",
      "params": [
        {"type": {"names": ["String"]}, "description": "<p>The name of the session variable to test</p>", "name": "key"},
        {
          "type": {
            "names": [
              "String",
              "Number",
              "Boolean",
              "null",
              "undefined"
            ]
          }, "description": "<p>The value to test against</p>", "name": "value"
        }
      ],
      "longname": "Session.equals",
      "options": [],
      "locus": "Client"
    }
  }
}